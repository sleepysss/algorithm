Unique Binary Search Trees


題目:Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n? 使用這n個node(1…n)，總共可以形成多少種不同的binary searching tree。

*Binary Search Trees:符合binary tree的特徵(只有一個root,不存在cycle,每個node只有一個parent,每個node最多只有兩個child),在外加右子樹的值>root且左子樹的值<root且每一個節點的值都不重複(在整棵二元樹中的
每一個節點都擁有不同值)這個條件

想法:先定義一個DP[i]擁有i個node(1…i)的BST總共有幾種排法。很明顯地，DP[0] = 1(空樹,空數也算一個BST)且DP[1] = 1(只有一個node),
     由BST的定義,可推出一個DP的方法
     在DP[3]的case，依照DP[2]的經驗，因為我們有1,2和3三個node，我們分別用它們三個來當root。
     首先，我們先用3來當root，而依照剛剛的特性，我們使用3當root，其左子樹所有node必定小於3，其實也就是使用1與2兩個node來形成BST，那不就是DP[2]了呢？而右子樹因為沒有大於3的node，就是DP[0] (空樹)了，所以在3為root的狀況排列組合就是DP[2] * DP[0] = 2。
     我們再來看另一個1為root的狀況，同理，其左子樹為空樹，而其右子樹就可以等化成用2,3來形成BST，但因為右子樹的BST並沒有額外的限制，因此用1,2或者2,3基本上都是一樣的意思!因此在1為root的排列組合就是DP[0]*DP[2] = 2。而一樣的道理，在2為root的情況就是DP[1] * DP[1] = 1了，三者加總的結果就是題目範例的結果5


     **若root為r,則該BST依照定義,可被分割為 1~r-1 r r+1~n這3個part,又1~r-1為一個較小的BST(原本所求的BST為1~n),且r+1~n會等價於1~n-r(平移的概念),也為一個較小的BST,所以root為r時會有左子*右子這麼多方法數,最後的答案就是用for讓每個點都當過一次root,並把結果累加起來即可