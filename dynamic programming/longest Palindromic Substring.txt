最長回文子串(Longest Palindromic Substring)

問題：給定字符串S，求S中的最長回文子串
提示:首先你要知道回文是什么。回文就是從左右兩邊讀都一樣的字符串。例如”aba”是回文，”abc”不是回文。

*暴力窮舉法O(N3)
最簡單的就是暴力窮舉(Brute Force)對每個start和end位置的子串進行檢測，判斷其是否回文。顯然有C(N,2)（組合）個子串。檢測每個子串都需要O(N)的時間，所以此方法的時間復雜度為O(N3)。

*暴力窮舉法
注意到每個回文字串都是以一個對稱點為中心左右對稱的，所以暴力運算的方式是我們迴圈每個字母作對稱點，然後在每個對稱點檢視所能找到的最大回文字串的長度，最終得到結果。需注意偶長度回文字串的處理

*動態規劃法O(N2)時間O(N2)空間
我們可以用動態規劃(Dynamic Programming即DP)法對暴力窮舉法進行改進。記住，訣竅就是避免重復計算（即重復檢測同一子串）。考慮這個例子”ababa”。如果我們已經檢測過”bab”是回文，那么只需判斷一下最左右的兩個字符（即兩個a）是否相同即可判定”ababa”是否回文了。

總結起來就是：

定義二維數組P[i,j]用以表示Si…Sj是回文（true）或不是回文（false）

那么可知P[i,j] = (P[i + 1, j - 1] && Si ==Sj) (i+1 j-1就是扣掉兩個邊界,看看少了兩個邊界,小的那個是不是回文,接著再檢查邊界是否一樣)

初始條件是：P[i, i]=true，P[i, i + 1] = (Si == Si+1) <-兩個

這個DP法的思路就是，首先可以知道單個字符和兩個相鄰字符是否回文，然后檢測連續三個字符是否回文，然后四個。。。

此算法時間復雜度O(N2)，空間復雜度O(N2)。